pipeline
{
agent any
    stages 
    {
        stage('Checkout') 
        {

            steps 
            {
                git 'git@git.ccfe.ac.uk:process/process.git'
                lastChanges since: 'LAST_SUCCESSFUL_BUILD', format:'SIDE',matching: 'LINE'
//              checkout scm
          checkout changelog: false, poll: false, 
          scm: [$class: 'GitSCM', branches: [[name: '*/develop']], 
          doGenerateSubmoduleConfigurations: false, extensions: [],         
          submoduleCfg: [], userRemoteConfigs: [[credentialsId: '3fec59c5-adab-4c2a-9891-50efc6b25a95', 
          url: 'git@git.ccfe.ac.uk:mkumar/PROCESS_Testing.git']]]
              sh 'pwd'
              sh 'ls -lah'
            }
        } // end of stage : Checkout
        stage('Get_resultsCheck')
        {
            steps 
            {
		  sh 'gcc --version'
		  sh 'mkdir -p resultsCheck_bin'
		  copyArtifacts fingerprintArtifacts: true, flatten: true, projectName: 'resultsCheck', selector: lastSuccessful(), target: 'resultsCheck_bin'
                  sh 'ls -lah'
		  sh 'ls -lah resultsCheck_bin'
		  sh 'cd resultsCheck_bin'
                  sh 'ls -lah'
               dir('resultsCheck_bin')
              {
                sh 'pwd'
                sh 'rm -rf *.xunit'
                sh 'rm -rf *.xml'
              }
                dir('test_results')
              {
                sh 'pwd'
                sh 'rm -rf *.xunit'
                sh 'rm -rf *.xml'
              }

            }
        } // end of stage : Build_results_check

        stage('Build')
        {

          steps
          {
             sh 'gcc --version'
             sh 'export CC=/usr/local/bin/gcc'
             sh 'export CXX=/usr/local/bin/g++'
               pwd()
               sh 'cmake -H. -Bbuild'
               sh 'cmake --build build'
               sh 'ls bin -lah'
               sh 'cp bin/PROCESS_Testing ../test_results'
             sh 'ls -lah'
          }
        }  // end of stage : Build
        stage('get_PROCESS_Test_results') 
        {    // Get process test results generate by test_suite.py
            steps
            {
                sh 'rm -rf PROCESS_Test_results.zip'
                sh "curl -X GET -o PROCESS_Test_results.zip https://private_token=MiLNGc-QvyEevhKK54go@git.ccfe.ac.uk/api/v4/projects/2172/jobs/artifacts/develop/download?job=test:result_files"
                sh 'ls -lah'
                sh 'unzip -o PROCESS_Test_results.zip'
                sh 'cp bin/PROCESS_Testing test_results/'
                sh 'cp test_results/*.xunit resultsCheck_bin'
                dir('test_results')
              {
                  sh 'ls -lah'
              }
            }
       }

        stage('run_Test') 
        {
           environment 
		   {
	          LD_LIBRARY_PATH="bin"
//			  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:bin"
     		}

            steps 
            {
			  sh 'ls -lah'
//			  sh 'mkdir -p junit_test_results'
			  sh 'ls -lah test_results'
			  sh 'ls -lah resultsCheck_bin'
                dir('test_results')
                {
                    sh 'rm -rf *.xml'
                    sh 'ls -lahl'
                    sh 'chmod +x PROCESS_Testing'
                    sh './PROCESS_Testing 2'
                    sh 'ls -lah *.xml'
                }
			}
        } // end of stage : Test
        stage('get_linter_results')
        {    // Get lint result files generated by pylint
            steps
            {
              sh "curl -X GET -o Linter_result_files.zip https://private_token=MiLNGc-QvyEevhKK54go@git.ccfe.ac.uk/api/v4/projects/2172/jobs/artifacts/develop/download?job=test:linter_results"
              sh 'unzip -o Linter_result_files.zip'
              sh 'ls -lah'
            }
       }    // end of stage : get_linter_results

    }  // end of stages
	post 
    {
        always
        {
            dir('resultsCheck_bin') 
            { 
                sh 'ls -lah'
//                junit '**/*.xml'
            }
            dir('test_results')
            {
                sh 'ls -lah *.xml'
                junit '**/*.xml'
            }
            dir('linter_results')
            { 
                sh 'ls -lah'
                step([
                    $class : 'WarningsPublisher',
                     parserConfigurations : [[
                          parserName: 'PYLint',
                          pattern   : 'lint_results.lint'
                     ]],
                     unstableTotalAll : '0',
                     usePreviousBuildAsReference: true
                   ])
            }

//			archiveArtifacts 'bin/*.so, bin/resultsCheck , source/*.h'
        }  // end of always

    } // end of post

}  // end of pipeline
