#
#  GitLab CI configuration file for PROCESS repository
#
#  J. Morris
#  M. Kumar
#  K. Zarebski
#
#  UKAEA
#  11/03/2021
#
#-----------------------------------------------------

# All jobs are run on ubuntu-tagged runners; freia-tagged runners are not 
# supported due to modifying the Docker containers used here after they are run

stages:
  - containers
  - build
  - testing
  - step
  - quality
  - tracking
  - pages

#-----------------
#  Containers
#-----------------
# should be first because the rest of the CI system uses the CI image
build_docker_ci_image:
  stage: containers
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - cd docker/ci
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN
    - docker build -t $CI_REGISTRY/process/process/ci-image:latest .
    - docker push $CI_REGISTRY/process/process/ci-image:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes: 
        - docker/ci/Dockerfile

build_docker_dev_image:
  stage: containers
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  script:
    - cd docker/dev
    - docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN
    - docker build -t $CI_REGISTRY/process/process/dev:latest .
    - docker push $CI_REGISTRY/process/process/dev:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes: 
        - docker/dev/Dockerfile


.before_test_template: &test-setup
  image: git.ccfe.ac.uk:4567/process/process/ci-image:latest
  before_script:
    - source ~/.venv_$PY_VERSION/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - python -m pip install git+https://github.com/jonMaddockUkaea/ford
    - python -m pip install --find-links=process_dist_$PY_VERSION process
    - apt update && apt upgrade -y
    - apt install lcov -y

.before_test_template-py38: &test-setup-py38
  variables:
    PY_VERSION: py38
  <<: *test-setup

.before_test_template-py36: &test-setup-py36
  variables:
    PY_VERSION: py36
  <<: *test-setup


# a CI deploy token only allows registry access, but not repository write access (it can provide read)
# https://docs.gitlab.com/ee/user/project/deploy_tokens/
#
# For the CI system to read/write to the repository it must have an SSH identity. This SSH identity (public key)
# can then be added as a Deploy Key (Settings/Repository/Deploy Keys) to provide read (and optionally write) 
# access to the repository.
#
# Put the private key as a CI/CD variable (protected), e.g. CI_RUNNER_PRIVATE_KEY
# NOTE: RSA keys are not maskable

# due to the way CI/CD variables work: the header and trailer of the key
# should not be present in CI_RUNNER_PRIVATE_KEY
# only the actual private key numbers/letters

# setup SSH and add our private key

# add CCFE gitlab instances as known-hosts
# otherwise git commands to this remote
# will error out with an unknown host error

# setup our git identity
.setup-ssh: &setup-ssh |
    mkdir -p ~/.ssh
    chmod 700 ~/.ssh
    echo "-----BEGIN OPENSSH PRIVATE KEY-----" > ~/.ssh/id_rsa
    echo "$CI_RUNNER_PRIVATE_KEY" >> ~/.ssh/id_rsa
    echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/id_rsa
    chmod 700 ~/.ssh/id_rsa
    command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )
    eval $(ssh-agent -s)
    ssh-add ~/.ssh/id_rsa
    echo $(ssh-keygen -E md5 -lf ~/.ssh/id_rsa)
    ssh-keyscan -t ecdsa -H git.ccfe.ac.uk > ~/.ssh/known_hosts
    ssh-keyscan -t ecdsa -H 194.81.223.100 >> ~/.ssh/known_hosts
    ssh-keygen -H -F git.ccfe.ac.uk
    ssh-keygen -H -F 194.81.223.100
    cat ~/.ssh/known_hosts
    git config --global user.name "${CI_RUNNER_DESCRIPTION}"
    git config --global user.email "${CI_RUNNER_ID}@git.ccfe.ac.uk"


#-----------------
#  Build
#-----------------
.make:
  stage: build
  image: git.ccfe.ac.uk:4567/process/process/ci-image:latest
  artifacts:
    when: on_success
    untracked: true
    paths:
      - process_dist_$PY_VERSION/process-*.tar.gz
      - process_dist_$PY_VERSION/process-*.whl
      - build/CMakeFiles/process.dir/source/fortran/*.gcno
      - lcov_results
      - python_modules.txt
      # keeping untracked process files (ie .so and .json files)
      # allows a quick reinstall of Process to be made when
      # _fortran.py is created in the pages job
      - process/
    expire_in: 1 week
  script:
    - source ~/.venv_$PY_VERSION/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install -r requirements.txt
    - cmake -H. -Bbuild
    - cmake --build build
    - python3 setup.py sdist -d process_dist_$PY_VERSION
    - python3 setup.py bdist_wheel -d process_dist_$PY_VERSION
    - python -m pip freeze > python_modules.txt
  tags:
    - ubuntu

make-py38:
  extends: ".make"
  variables:
    PY_VERSION: py38

make-py36:
  extends: ".make"
  variables:
    PY_VERSION: py36

#-----------------
#  Testing
#-----------------

.unit:
  when: on_success
  stage: testing
  script:
    - pytest tests/unit
  tags:
    - ubuntu

unit-py38:
  extends: ".unit"
  <<: *test-setup-py38

unit-py36:
  only:
    - master
    - develop
  extends: ".unit"
  <<: *test-setup-py36

.integration:
  when: on_success
  stage: testing
  artifacts:
    when: on_failure
    paths:
      - tests/integration/pytest.log
    expire_in: 1 week
  script:
    - pytest -v tests/integration/ -s | tee tests/integration/pytest.log
  tags:
    - ubuntu

integration-py38:
  extends: ".integration"
  <<: *test-setup-py38

integration-py36:
  only:
    - master
    - develop
  extends: ".integration"
  <<: *test-setup-py36

.regression:
  when: on_success
  stage: testing
  artifacts:
    paths: 
      - lcov_results
      - tests/regression/pytest.log
      - tests/regression/scenarios/starfire/out.MFILE.DAT
    expire_in: 1 week
  script:
    - pytest -v tests/regression -s | tee tests/regression/pytest.log
    - lcov --gcov-tool gcov --capture --directory build/CMakeFiles/process.dir/source/fortran/ --output-file lcov_results/coverage.info
    - genhtml --output-directory lcov_results/html lcov_results/coverage.info
  tags:
    - ubuntu

regression-py38:
  extends: ".regression"
  <<: *test-setup-py38
  dependencies:
    - make-py38

regression-py36:
  only:
    - master
    - develop
  extends: ".regression"
  <<: *test-setup-py36
  dependencies:
    - make-py36

regression-py38-5-percent:
  extends: ".regression"
  <<: *test-setup-py38
  dependencies:
    - make-py38
  artifacts:
    paths:
      - tests/regression/pytest_5_percent.log
  script:
    - pytest -v tests/regression -s --reg-tolerance=5 | tee tests/regression/pytest_5_percent.log

baseline_2019-py38:
  when: on_success
  only:
    - develop
  stage: testing
  <<: *test-setup-py38
  script:
    - process -i tracking/baseline_2019/baseline_2019_IN.DAT
  artifacts:
    paths:
      - tracking/baseline_2019/baseline_2019_MFILE.DAT
    expire_in: 1 week
  tags:
    - ubuntu

baseline_2018-py38:
  when: on_success
  only:
    - develop
  stage: testing
  <<: *test-setup-py38
  script:
    - process -i tracking/baseline_2018/baseline_2018_IN.DAT
  artifacts:
    paths:
      - tracking/baseline_2018/baseline_2018_MFILE.DAT
    expire_in: 1 week
  tags:
    - ubuntu

starfire-py38:
  when: on_success
  only:
    - develop
  stage: testing
  <<: *test-setup-py38
  script:
    - process -i tests/regression/scenarios/starfire/IN.DAT
    - mv tests/regression/scenarios/starfire/MFILE.DAT tracking/starfire_MFILE.DAT 
  artifacts:
    paths:
      - tracking/starfire_MFILE.DAT 
    expire_in: 1 week
  tags:
    - ubuntu

#-----------------
#  Quality
#-----------------

line_length:
  when: on_success
  stage: quality
  image: git.ccfe.ac.uk:4567/process/process/ci-image:latest
  script:
    - pwd
    - python3 utilities/line_length_standard.py
  tags:
    - ubuntu

#-----------------
#  Tracking
#-----------------

tracking_rtv:
  when: on_success
  image: git.ccfe.ac.uk:4567/process/process/ci-image:latest
  only: 
    - develop
  stage: tracking
  allow_failure: true
  <<: *test-setup-py38
  script:
    - *setup-ssh
    - pip install pandas
    - pip install bokeh
    # clone the database repo into a known location
    - git clone git@git.ccfe.ac.uk:tnunn/process-tracking-database.git ${CI_PROJECT_DIR}/process_rtv_data/
    # write new tracking json files for each of our baseline tracking jobs
    - python ${CI_PROJECT_DIR}/tracking/tracking_data.py track ${CI_PROJECT_DIR}/process_rtv_data/ --mfile ${CI_PROJECT_DIR}/tracking/baseline_2018/baseline_2018_MFILE.DAT
    - python ${CI_PROJECT_DIR}/tracking/tracking_data.py track ${CI_PROJECT_DIR}/process_rtv_data/ --mfile ${CI_PROJECT_DIR}/tracking/baseline_2019/baseline_2019_MFILE.DAT
    - python ${CI_PROJECT_DIR}/tracking/tracking_data.py track ${CI_PROJECT_DIR}/process_rtv_data/ --mfile ${CI_PROJECT_DIR}/tracking/starfire_MFILE.DAT 
    # create the new tracking dashboard
    - python ${CI_PROJECT_DIR}/tracking/tracking_data.py plot ${CI_PROJECT_DIR}/process_rtv_data/ --out ${CI_PROJECT_DIR}/tracking.html
    # commit the new .json data files to the database repo and pushes them
    - cd ${CI_PROJECT_DIR}/process_rtv_data/
    - git add .
    - git commit -m "${CI_PIPELINE_URL} - ${CI_PIPELINE_CREATED_AT}" 
    - git push
  artifacts:
    when: always
    paths:
      - ${CI_PROJECT_DIR}/tracking.html


#-----------------
#  Pages
#-----------------
pages:
  when: on_success
  only:
    - develop
  stage: pages
  image: git.ccfe.ac.uk:4567/process/process/ci-image:latest
  variables:
    PY_VERSION: py38
  <<: *test-setup-py38
  dependencies:
    - make-py38
    - tracking_rtv
  script:
    - pwd
    - source ~/.venv_$PY_VERSION/bin/activate
    
    # FORD documentation
    - python3 -m pip install git+https://github.com/jonMaddockUkaea/ford
    - ford documentation/ford/index.md

    # python docs documentation
    - python3 -m pip install mkdocstrings
    - python3 ${CI_PROJECT_DIR}/scripts/document_fortran_interface.py
    - python3 ${CI_PROJECT_DIR}/scripts/vardes.py
    # mkdocstrings imports process to write its documentation,
    # process must be reinstalled with _fortran.py available
    # otherwise mkdcostrings won't be able to find it
    - python3 -m pip install -e .
    
    # Build the MkDocs site (after FORD has been used to create the vardes)
    - mkdocs build
    
    # Publish the MkDocs and FORD sites
    - ls site
    - mv site public
    - mv ford_site public
    # if tracking.html doesn't exist, put an error404 in its place
    - mv tracking.html public || cp public/404.html public/tracking.html

    # Install requirements for Code Quality
    - python3 -m pip install flinter==0.3.0
    - apt-get install bc -y

    # Setup badges
    - git clone https://github.com/jmorris-uk/anybadge.git
    # checks for the tag on the most up-to-date branch (master)
    - MASTER_VERSION=$(git describe $(git rev-list --tags --max-count=1))
    - DEVELOP_VERSION=$(git describe)
    - declare -i CONTRIBUTORS=$(git shortlog -s -n --all | wc -l)
    - echo $CONTRIBUTORS
    - bash scripts/coverage_badge.sh source/fortran/ anybadge/
    - cp coverage.svg public/
    - bash scripts/code_quality.sh source/fortran/ anybadge/
    - cp quality.svg public/
    - cp -r code_quality public/
    - cd anybadge
    - python3 anybadge.py -v $MASTER_VERSION -l master -c blue -f mversion.svg
    - python3 anybadge.py -v $DEVELOP_VERSION -l develop -c blue -f dversion.svg
    - python3 anybadge.py -v $CONTRIBUTORS -l contributors -c blue -f contributors.svg -m "%d"
    - cp mversion.svg ../public
    - cp dversion.svg ../public
    - cp contributors.svg ../public
    - ls ../public
    - du -shc ../public/*
    - du -shc ../public/ford_site/*
  tags:
    - ubuntu
    
  artifacts:
    expire_in: 1 week
    paths:
    - public



#-----------------
#  STEP
#-----------------

step_trigger:
  when: on_success
  image: git.ccfe.ac.uk:4567/tnunn/gitlab-multi-project-pipeline/trigger:latest
  only: 
    - develop
  stage: step
  allow_failure: true
  script:
    - trigger -u https://git.ccfe.ac.uk/api/v4/projects/4023 -b master -T $CI_JOB_TOKEN -P $CI_JOB_PRIVATE_TOKEN