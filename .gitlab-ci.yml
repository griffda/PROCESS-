#
#  GitLab CI configuration file for PROCESS repository
#
#  J. Morris
#  M. Kumar
#  K. Zarebski
#
#  UKAEA
#  11/03/2021
#
#-----------------------------------------------------

# All jobs are run on ubuntu-tagged runners; freia-tagged runners are not 
# supported due to modifying the Docker containers used here after they are run

stages:
  - build
  - testing
  - step
  - quality
  - pages
  - tracking

.before_test_template: &test-setup
  image: git.ccfe.ac.uk:4567/process/process/python-coverage-ci-image:ub20_gf9_pyenv
  before_script:
    - source ~/.venv_$PY_VERSION/bin/activate
    - python -m pip install --upgrade pip
    # Manually install numpy as including it in requirements doesnt install it
    # It is a pre-requisite to f90wrap install, although requirements in image
    # always want latest to detect any immediate future problems
    - python -m pip install --ignore-installed numpy
    - python -m pip install --ignore-installed -r requirements.txt
    - python -m pip install git+https://github.com/jonMaddockUkaea/ford
    - python -m pip install --find-links=process_dist_$PY_VERSION process
    - apt update && apt upgrade -y
    - apt install lcov -y

.before_test_template-py38: &test-setup-py38
  variables:
    PY_VERSION: py38
  <<: *test-setup

.before_test_template-py36: &test-setup-py36
  variables:
    PY_VERSION: py36
  <<: *test-setup

#-----------------
#  Build
#-----------------
.make:
  stage: build
  image: git.ccfe.ac.uk:4567/process/process/python-coverage-ci-image:ub20_gf9_pyenv
  artifacts:
    paths:
      - process_dist_$PY_VERSION/process-*.tar.gz
      - process_dist_$PY_VERSION/process-*.whl
      - build/CMakeFiles/process.dir/source/fortran/*.gcno
      - lcov_results
      - python_modules.txt
    expire_in: 1 week
  script:
    - source ~/.venv_$PY_VERSION/bin/activate
    - python -m pip install --upgrade pip
    - python -m pip install --ignore-installed numpy
    - python -m pip install --ignore-installed -r requirements.txt
    - cmake -H. -Bbuild
    - cmake --build build
    - python3 setup.py sdist -d process_dist_$PY_VERSION
    - python3 setup.py bdist_wheel -d process_dist_$PY_VERSION
    - python -m pip freeze > python_modules.txt
  tags:
    - ubuntu

make-py38:
  extends: ".make"
  variables:
    PY_VERSION: py38

make-py36:
  extends: ".make"
  variables:
    PY_VERSION: py36

#-----------------
#  Testing
#-----------------

.unit:
  when: on_success
  stage: testing
  script:
    - pytest tests/unit
  tags:
    - ubuntu

unit-py38:
  extends: ".unit"
  <<: *test-setup-py38

unit-py36:
  only:
    - master
    - develop
  extends: ".unit"
  <<: *test-setup-py36

.integration:
  when: on_success
  stage: testing
  artifacts:
    when: on_failure
    paths:
      - tests/integration/pytest.log
    expire_in: 1 week
  script:
    - pytest -v tests/integration/ -s | tee tests/integration/pytest.log
  tags:
    - ubuntu

integration-py38:
  extends: ".integration"
  <<: *test-setup-py38

integration-py36:
  only:
    - master
    - develop
  extends: ".integration"
  <<: *test-setup-py36

.unitfort:
  when: on_success
  stage: testing
  script:
    - python3 -m pip install tabulate
    - pytest tests/ -m unitfort
    - python3 tests/uft_tests/coverage.py
  tags:
    - ubuntu

.unitfort-py38:
  extends: ".unitfort"
  <<: *test-setup-py38

.unitfort-py36:
  only:
    - master
    - develop
  extends: ".unitfort"
  <<: *test-setup-py36

.regression:
  when: on_success
  stage: testing
  artifacts:
    paths: 
      - lcov_results
      - tests/regression/pytest.log
      - tests/regression/scenarios/starfire/out.MFILE.DAT
    expire_in: 1 week
  script:
    - pytest -v tests/regression -s --keep=starfire | tee tests/regression/pytest.log
    - lcov --gcov-tool gcov --capture --directory build/CMakeFiles/process.dir/source/fortran/ --output-file lcov_results/coverage.info
    - genhtml --output-directory lcov_results/html lcov_results/coverage.info
  tags:
    - ubuntu

regression-py38:
  extends: ".regression"
  <<: *test-setup-py38
  dependencies:
    - make-py38

regression-py36:
  only:
    - master
    - develop
  extends: ".regression"
  <<: *test-setup-py36
  dependencies:
    - make-py36

regression-py38-5-percent:
  extends: ".regression"
  <<: *test-setup-py38
  dependencies:
    - make-py38
  artifacts:
    paths:
      - tests/regression/pytest_5_percent.log
  script:
    - pytest -v tests/regression -s --reg-tolerance=5 | tee tests/regression/pytest_5_percent.log

baseline_2019-py38:
  when: on_success
  only:
    - develop
  stage: testing
  <<: *test-setup-py38
  script:
    - process -i tracking/baseline_2019/baseline_2019_IN.DAT
  artifacts:
    paths:
      - tracking/baseline_2019/baseline_2019_MFILE.DAT
    expire_in: 1 week
  tags:
    - ubuntu

baseline_2018-py38:
  when: on_success
  only:
    - develop
  stage: testing
  <<: *test-setup-py38
  script:
    - process -i tracking/baseline_2018/baseline_2018_IN.DAT
  artifacts:
    paths:
      - tracking/baseline_2018/baseline_2018_MFILE.DAT
    expire_in: 1 week
  tags:
    - ubuntu
#-----------------
#  Quality
#-----------------

line_length:
  when: on_success
  stage: quality
  image: git.ccfe.ac.uk:4567/process/process/python-coverage-ci-image:ub20_gf9
  script:
    - pwd
    - python3 utilities/line_length_standard.py
  tags:
    - ubuntu

#-----------------
#  Pages
#-----------------

pages:
  when: on_success
  only:
    - develop
  stage: pages
  image: git.ccfe.ac.uk:4567/process/process/python-coverage-ci-image:ub20_gf9
  script:
    - pwd
    
    # FORD documentation
    - python3 -m pip install git+https://github.com/jonMaddockUkaea/ford
    - ford documentation/ford/index.md
    
    # Build the MkDocs site (after FORD has been used to create the vardes)
    - mkdocs build
    
    # Publish the MkDocs and FORD sites
    - ls site
    - mv site public
    - mv ford_site public

    # Install requirements for Code Quality
    - python3 -m pip install flinter==0.3.0
    - apt-get install bc -y

    # Setup badges
    - git clone https://github.com/jmorris-uk/anybadge.git
    - TAG=$(git describe --abbrev=0)
    - VERSION=$(git describe)
    - declare -i CONTRIBUTORS=$(git shortlog -s -n --all | wc -l)
    - echo $CONTRIBUTORS
    - bash scripts/coverage_badge.sh source/fortran/ anybadge/
    - cp coverage.svg public/
    - bash scripts/code_quality.sh source/fortran/ anybadge/
    - cp quality.svg public/
    - cp -r code_quality public/
    - cd anybadge
    - python3 anybadge.py -v $TAG -l tag -c blue -f tag.svg
    - python3 anybadge.py -v $VERSION -l version -c blue -f version.svg
    - python3 anybadge.py -v $CONTRIBUTORS -l contributors -c blue -f contributors.svg -m "%d"
    - cp tag.svg ../public
    - cp version.svg ../public
    - cp contributors.svg ../public
    - ls ../public
    - du -shc ../public/*
    - du -shc ../public/ford_site/*
  tags:
    - ubuntu
    
  artifacts:
    expire_in: 1 week
    paths:
    - public

#-----------------
#  STEP
#-----------------

step_trigger:
  when: on_success
  image: git.ccfe.ac.uk:4567/tnunn/gitlab-multi-project-pipeline/trigger:latest
  only: 
    - develop
  stage: step
  allow_failure: true
  script:
    - trigger -u https://git.ccfe.ac.uk/api/v4/projects/4023 -b master -T $CI_JOB_TOKEN -P $CI_JOB_PRIVATE_TOKEN

#-----------------
#  Tracking
#-----------------

rtv_trigger:
  when: on_success
  image: git.ccfe.ac.uk:4567/tnunn/gitlab-multi-project-pipeline/trigger:latest
  only: 
    - develop
  stage: tracking
  allow_failure: true
  script:
    - trigger -u https://git.ccfe.ac.uk/api/v4/projects/5447 -b master -T $CI_JOB_TOKEN -P $CI_JOB_PRIVATE_TOKEN
  needs:
    - job: step_trigger
      artifacts: false