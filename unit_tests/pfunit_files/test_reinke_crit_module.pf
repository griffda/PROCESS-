module test_reinke_crit_module
!     use physics_functions_module
    use reinke_module
   implicit none
   public

      real*8 :: test_Bt = 12.0
      real(kind(1.0D0)) :: tsep
      real(kind(1.0D0)) :: tol = 0.001

contains

@Before
   subroutine mySetup()
      implicit none

   end subroutine mySetup

@After
   subroutine myTearDown()
      implicit none

   end subroutine myTearDown

@Test
   subroutine test_reinke_tsep()
      use ISO_FORTRAN_ENV
      use pfunit_mod
      implicit none
      real(kind(1.0D0)) :: flh, qstar, rmajor, eps, fgw, kappa, lhat

      flh = 1.0
      qstar = 3.0
      rmajor = 1.65
      eps = 0.33
      fgw = 0.8
      kappa = 1.7
      lhat =  4.33
      tsep = reinke_tsep(test_Bt, flh, qstar, rmajor, eps, fgw, kappa, lhat)
!      @assertEqual(0.4754299, tsep)
      @assertLessThan(abs(0.4754299 - tsep), tol)

   end subroutine test_reinke_tsep

@Test
   subroutine test_reinke_fzmin()
      use ISO_FORTRAN_ENV
      use pfunit_mod
    use impurity_radiation_module

      implicit none
      integer :: i
      integer ::element = 5 
      type(imp_dat), dimension(14), save :: test_imp_arr
      real(kind(1.0D0)), dimension(14) :: impurity_enrichment
      real(kind(1.0D0)) :: fzmin
      real(kind(1.0D0)) :: flh, qstar, rmajor, eps, fsep, fgw, kappa, lhat
      real(kind(1.0D0)) :: netau 
      real(kind(1.0D0)) :: tesep 

      flh = 1.0
      qstar = 3.0
      rmajor = 1.65
      eps = 0.33
      fsep = 1.0 
      fgw = 0.8
      kappa = 1.7
      lhat =  4.33

      netau = 0.1 

      do i = 1, 14
        test_imp_arr(i)%frac = 0.0D0
        test_imp_arr(i)%label = imp_label(i)
        impurity_enrichment(i) = 1.0D0
      enddo
      fzmin = reinke_fzmin(test_Bt, flh, qstar, rmajor, eps, fsep, fgw, kappa, lhat, &
       netau, tsep, element, test_imp_arr, impurity_enrichment)
!      @assertEqual(abs(0.1051752-fzmin), tol)
      @assertLessThan(abs(0.1051752-fzmin), tol)

   end subroutine test_reinke_fzmin

end module test_reinke_crit_module
